package String.회문2;

import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Scanner;

public class Solution {

	public static void main(String[] args) throws IOException {
//		Scanner sc = new Scanner(System.in);
		Scanner sc = new Scanner(new File("C:\\Users\\SSAFY\\Desktop\\APS\\SWEA\\src\\String\\회문2\\input.txt"));

		int T = 10;
		int N = 100;

		for (int t = 1; t <= T; t++) {
			sc.nextInt();
			char[][] map = new char[N][N];
			for (int r = 0; r < N; r++) {
				String line = sc.next();
				for (int c = 0; c < N; c++) {
					map[r][c] = line.charAt(c);
				}
			}

			int longestH = 0;
			int longestV = 0;
			boolean searchH = true;
			boolean searchV = true;
			outer: for (int r = 0; r < N - 1; r++) {
				for (int c = 0; c < N - 1; c++) {
					for (int i = 0; i < r; i++) {
						boolean flagH = true;
						boolean flagV = true;
						for (int j = 0; j < (N - 1 - i - c) / 2 + c; j++) {
							if (searchH) {
								if (flagH) {
									if (map[r][c] != map[r][N - 1 - i - j]) {
										flagH = false;
									}
								}
							}
							if (flagV) {
								if (map[c][r] != map[N - 1 - i - j][r]) {
									flagV = false;
								}
							}
							if (!(flagH || flagV))
								break;
						}
						if (flagH) {
							longestH = N - 1 - i - r;
							searchH = false;
						}
						if (flagV) {
							longestV = N - 1 - i - r;
							searchV = false;
						}
						if (!(searchH || searchV)) {
							break outer;
						}
					}

				}
			}
			System.out.println(String.format("#%d %d", t, Math.max(longestH, longestV)));
		}

		sc.close();
	}

}
